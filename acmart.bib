@book{chisel:book,
   title = {Digital Design with Chisel},
   publisher = {Kindle Direct Publishing},
   year = {2019},
   author = {Martin Schoeberl},
   url = {https://github.com/schoeberl/chisel-book}
}

@inproceedings{chisel:article,
author = {Bachrach, Jonathan and Vo, Huy and Richards, Brian and Lee, Yunsup and Waterman, Andrew and Avi\v{z}ienis, Rimas and Wawrzynek, John and Asanovi\'{c}, Krste},
title = {Chisel: Constructing Hardware in a Scala Embedded Language},
year = {2012},
isbn = {9781450311991},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2228360.2228584},
doi = {10.1145/2228360.2228584},
abstract = {In this paper we introduce Chisel, a new hardware construction language that supports advanced hardware design using highly parameterized generators and layered domain-specific hardware languages. By embedding Chisel in the Scala programming language, we raise the level of hardware design abstraction by providing concepts including object orientation, functional programming, parameterized types, and type inference. Chisel can generate a high-speed C++-based cycle-accurate software simulator, or low-level Verilog designed to map to either FPGAs or to a standard ASIC flow for synthesis. This paper presents Chisel, its embedding in Scala, hardware examples, and results for C++ simulation, Verilog emulation and ASIC synthesis.},
booktitle = {Proceedings of the 49th Annual Design Automation Conference},
pages = {1216–1225},
numpages = {10},
keywords = {CAD},
location = {San Francisco, California},
series = {DAC '12}
}


@techreport{scala-overview-tech-report,
  added-at = {2009-01-05T14:22:57.000+0100},
  author = {Odersky, Martin and al.},
  biburl = {https://www.bibsonomy.org/bibtex/2bf283793321b856bcb6613c10508f7c3/sac},
  description = {Martin Odersky's Papers: An Overview of the Scala Programming Language},
  institution = {EPFL Lausanne, Switzerland},
  interhash = {668a932eb87ae21bcd92529b24b8c614},
  intrahash = {bf283793321b856bcb6613c10508f7c3},
  keywords = {fp imported martin odersky scala semainar},
  number = {IC/2004/64},
  timestamp = {2009-01-05T14:22:57.000+0100},
  title = {An Overview of the Scala Programming Language},
  year = 2004
}

@misc{vlsicourse,
author = {John Wawrzynek and Chris Yarp},
title = {CS250: VLSI Systems Design},
howpublished = {U.C. Berkeley},
year = {2016}}

@online{chisel:riscv,
  author = {UC Berekely},
  title = {RocketChip Generator},
  year = 2022,
  url = {https://github.com/chipsalliance/rocket-chip/blob/master/README.md},
  urldate = {2021-06-25}
}

@online{aspectj,
  author = {Eclipse Foundation},
  title = {AspectJ},
  year = 2022,
  url = {https://www.eclipse.org/aspectj/},
  urldate = {2022-03-17}
}

@inproceedings{prehofer1997feature,
  title={Feature-oriented programming: A fresh look at objects},
  author={Prehofer, Christian},
  booktitle={European Conference on Object-Oriented Programming},
  pages={419--443},
  year={1997},
  organization={Springer}
}

@inproceedings{10.1145/2897695.2897701,
author = {Abilio, Ramon and Vale, Gustavo and Figueiredo, Eduardo and Costa, Heitor},
title = {Metrics for Feature-Oriented Programming},
year = {2016},
isbn = {9781450341776},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2897695.2897701},
doi = {10.1145/2897695.2897701},
abstract = {Feature-oriented programming (FOP) is a programming technique to implement software product lines based on composition mechanisms called refinements. A software product line is a set of software systems that share a common, managed set of features satisfying the specific needs of a particular market segment. The literature reports various software metrics for software product lines developed using object-oriented and aspect-oriented programming. However, after a literature review, we observed that we lack the definition of FOP-specific metrics. Based on this observation, this paper proposes a set of eight novel metrics for feature-oriented programming. These metrics were derived both from our experience in FOP and from existing software metrics. We demonstrate the applicability of the proposed metrics by applying them to a software product line.},
booktitle = {Proceedings of the 7th International Workshop on Emerging Trends in Software Metrics},
pages = {36–42},
numpages = {7},
keywords = {feature-oriented programming, software quality, software product lines, software metrics},
location = {Austin, Texas},
series = {WETSoM '16}
}


@article{10.1145/2518102,
author = {Fontana, Peter and Cleaveland, Rance},
title = {A Menagerie of Timed Automata},
year = {2014},
issue_date = {January 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {46},
number = {3},
issn = {0360-0300},
url = {https://doi.org/10.1145/2518102},
doi = {10.1145/2518102},
abstract = {Timed automata are state-machine-like structures used to model real-time systems. Since their invention in the early 1990s, a number of often subtly differing variants have appeared in the literature; one of this article’s key contributions is defining, highlighting, and reconciling these differences. The article achieves this by defining a baseline theory of timed automata, characterizing each variant both syntactically and semantically, and giving, when possible, syntactic and semantic conversion to and from the baseline version. This article also surveys various extensions to the basic timed-automaton framework.},
journal = {ACM Comput. Surv.},
month = {jan},
articleno = {40},
numpages = {56},
keywords = {Timed automata}
}


@book{sipser,
  author    = {Michael Sipser},
  title     = {Introduction to the theory of computation},
  publisher = {{PWS} Publishing Company},
  year      = {1997}
}

@book{vhdl,
author = {Berge, Jean-Michel},
title = {VHDL Designer's Reference},
year = {1992},
isbn = {0792317564},
publisher = {Kluwer Academic Publishers},
address = {USA}
}

@article{verilog,
  title={IEEE standard for Verilog hardware description language (IEEE 1364-2005)},
  author={IEEE Standards Association and others},
  journal={http://standards. ieee. org/},
  year={2006}
}

@InProceedings{10.1007/11527800_24,
author="Cointe, Pierre",
editor="Ban{\^a}tre, Jean-Pierre
and Fradet, Pascal
and Giavitto, Jean-Louis
and Michel, Olivier",
title="Towards Generative Programming",
booktitle="Unconventional Programming Paradigms",
year="2005",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="315--325",
abstract="Generative Programming (GP) is an attempt to manufacture software components in an automated way by developing programs that synthesize other programs. Our purpose is to introduce the what and the how of the GP approach from a programming language point of view. For the what we discuss the lessons learned from object-oriented languages seen as general purpose languages to develop software factories. For the how we compare a variety of approaches and techniques based on program transformation and generation. On the one hand, we present the evolution of open-ended languages from metalevel programming to aspect-oriented programming. On the other hand, we introduce domain-specific languages as a way to bridge the gap between conceptual models and programming languages.",
isbn="978-3-540-31482-0"
}